#!/bin/sh

function showHelp() {
	cat <<EOF
	DTWM - DOT FILES MANAGER

	Description: a simple script to manage dot files in your home directory.

	Usage: dwm <command> [flags]

	Examples:
EOF
}

# variables
if [[ -z $DTM_DATA_HOME  ]]; then
	if [[ -n ${XDG_DATA_HOME} ]]; then
		DTM_DATA_HOME=${XDG_DATA_HOME}/dtm
	else
		DTM_DATA_HOME=${HOME}/.local/share/dtm
	fi
fi

DTM_TRACKED_FILES_LIST=${DTM_DATA_HOME}/tracked-files.txt

# create files that DTM will use to track dot files
function createDataFiles() {
	mkdir -p ${DTM_DATA_HOME}
	touch $DTM_TRACKED_FILES_LIST
}

# get the path of a file/directory relative to the home directory
function getPathRelativeToHome() {
	path=$1
	path=${path#$HOME/}
	if [[ "$path" == "$1" ]]; then
		path=$(pwd)/$path
		path=${path#$HOME/}
	fi
	echo $path
}

# adds file to list of files being tracked
function trackFiles() {
	while [ -n "$1" ]; do
		filename=$1
		shift
		if ! [ -f "$filename" ]; then
			echo "Error, file \"$filename\" does not exist."
			echo 'Proceeding to the next file.'
			continue
		fi
		getPathRelativeToHome $filename >> ${DTM_TRACKED_FILES_LIST}
	done
}

# output the fiels being tracked
function getTrackedFiles() {
	cat ${DTM_TRACKED_FILES_LIST}
}

# 
function untrackAll() {
	echo -n $NULL > $DTM_TRACKED_FILES_LIST
	exit 0
}

# do not track the given file anymore
function untrackFiles() {
	[[ "$1" == "--all" ]] && untrackAll

	# we could use 'sed' to delete the line containing the name
  # of the file to untrack. However, this would cause bugs with
	# file names that have special characters. Therefore, it is
	# safer to do this manually using shell script.

  #	create a copy of files being tracked
	tmpfile=${DTM_TRACKED_FILES_LIST}.tmp
	cp $DTM_TRACKED_FILES_LIST $tmpfile

	# create a new list of files being tracked
	# ignoring the given files
	rm $DTM_TRACKED_FILES_LIST
	files=$@
	while read line; do
		trackThisFile=1
		for file in $files; do
			if [ "$file" == "$line" ]; then
				trackThisFile=
				break
			fi
		done
		[[ -n $trackThisFile ]] && echo $line >> $DTM_TRACKED_FILES_LIST
	done < $tmpfile

	# delete temporary file
	rm $tmpfile
}

function createLinks() {
	destdir=$1
	[[ -z $destdir ]] && destdir=${DTM_GIT_DIR}
	[[ -z $destdir ]] && echo 'ERROR: destination directory not specified.' && exit 1
	[[ ! -d "$destdir" ]] && echo 'ERROR: invalid directory.' && exit 1

	# whether to create symbolic links
	[[ "$2" == "--symbolic" ]] && symbolic=1

	# do not create links. Instead, copy the file
	[[ "$2" == "--copy" ]] && copy=1

	# create 

	while read file; do
		fullpath=$HOME/$file

		if [[ ! -f $fullpath ]]; then
			echo "File $fullpath does not exist. Skipping it"
			continue
		fi

		dir=${file%/*}
		[[ "$dir" == "$file" ]] && dir=

		mkdir -p "$destdir/$dir"
		if [[ -n $symbolic ]]; then
			ln -s "$fullpath" "$destdir/$dir"
		elif [[ -n $copy ]]; then
			cp "$fullpath" "$destdir/$dir"
		else
			ln "$fullpath" "$destdir/$dir"
		fi

	done < $DTM_TRACKED_FILES_LIST
}

function syncFromRepo() {
	destdir=$1
	[[ -z $destdir ]] && destdir=${DTM_GIT_DIR}
	[[ -z $destdir ]] && echo 'ERROR: destination directory not specified.' && exit 1
	[[ ! -d "$destdir" ]] && echo 'ERROR: invalid directory.' && exit 1

	while read file; do
		fullpath=$destdir/$file

		if [[ ! -f $fullpath ]]; then
			echo "File $fullpath does not exist. Skipping it"
			continue
		fi

		dir=${file%/*}
		[[ "$dir" == "$file" ]] && dir=

		mkdir -p "$HOME/$dir"
		if [[ -n $symbolic ]]; then
			ln -s "$fullpath" "$HOME/$dir"
		elif [[ -n $copy ]]; then
			cp "$fullpath" "$HOME/$dir"
		else
			ln "$fullpath" "$HOME/$dir"
		fi

	done < $DTM_TRACKED_FILES_LIST
}

createDataFiles

action=$1
(( $# > 0 )) && shift

case $action in
	list|ls|-l)
		getTrackedFiles
		;;
	add|-a)
		trackFiles $@
		;;
	rm|-r)
		untrackFiles $@
		;;
	link|ln|-L)
		createLinks $@
		;;
	copy|cp|-c)
		createLinks "$1" --copy
		;;
	sync|-s)
		syncFromRepo $@
		;;
	*)
		showHelp
		;;
esac
