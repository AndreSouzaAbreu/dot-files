#!/bin/sh

#############################
##     SHELL FUNCTIONS     ##
#############################

# append directory to path if not included already
function path_append()
{
  while [[ -n $1 ]]; do
    dir=$1
    if [[ -d "${dir}"  ]] && [[ ":${PATH}:" != *":${dir}:"*  ]]; then
      export PATH="${PATH}:${dir}"
    fi
    shift
  done
  return 0
}

# prepend directory to path if not included already
function path_prepend()
{
  while [[ -n $1 ]]; do
    dir=$1
    if [[ -d "${dir}"  ]] && [[ ":${PATH}:" != *":${dir}:"*  ]]; then
      export PATH="${dir}:${PATH}"
    fi
    shift
  done
  return 0
}

# utility to add, edit, view, or sync shell aliases
function aliases()
{
  aliases_file=${XDG_CONFIG_HOME}/shell/aliases
  case "$1" in
    edit|-e) $EDITOR $aliases_file ;;
    file|-f) echo $aliases_file ;;
    sync|-s) source $aliases_file ;;
    *)
      if [[ -z $1 ]]; then
        alias
      else
        alias | grep -i -P "$1"
      fi
    ;;
  esac
  return 0
}

# utility to edit, view, or sync shell profile
function profile()
{
  profile_file=${XDG_CONFIG_HOME}/shell/profile
  case "$1" in
    edit|-e) $EDITOR $profile_file ;;
    file|-f) echo $profile_file ;;
    sync|-s) source $profile_file ;;
    *) $PAGER $profile_file ;;
  esac
  return 0
}

# utility to edit, view, or sync shell functions
function myfunctions()
{
  file=${XDG_CONFIG_HOME}/shell/functions
  case "$1" in
    edit|-e) $EDITOR $file ;;
    file|-e) echo $file ;;
    sync|-s) source $file ;;
    *) $PAGER $file ;;
  esac
  return 0
}

# utility to edit, view, or syn environment variables
function envvars()
{
  env_file=${XDG_CONFIG_HOME}/shell/env
  case "$1" in
    edit|-e) $EDITOR $env_file ;;
    file|-f) echo $env_file ;;
    sync|-s) source $env_file ;;
    view|-v) $PAGER $env_file ;;
    *)
      if [[ -z $1 ]]; then
        env | sort -i
      else
        env | grep -i -P "$1" | sort -i
      fi
    ;;
  esac
  return 0
}

# Go back to the parent directory n times
function up()
{
  number="${1:-1}"
  for i in $(seq $number); do
    cd ..
  done
  return 0
}

# Make a directory and cd into it
function mkcd()
{
  mkdir -p "$1" && cd "$1"
  return 0
}

function extract()
{
  [[ ! -f $1 ]] && echo "No such file: $1" && return 1
  case $1 in
    *.tar.bz2) tar xvjf $1   ;;
    *.tar.gz)  tar xvzf $1   ;;
    *.bz2)     bunzip2 $1    ;;
    *.rar)     unrar x $1    ;;
    *.gz)      gunzip $1     ;;
    *.tar)     tar xvf $1    ;;
    *.tbz2)    tar xvjf $1   ;;
    *.tgz)     tar xvzf $1   ;;
    *.zip)     unzip $1      ;;
    *.Z)       uncompress $1 ;;
    *.7z)      7z x $1       ;;
    *)        echo "Cannot extract it";;
  esac
  return 0
}

# ranger wrapper
function ranger
{
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map q chain shell echo %d > "$tempfile"; quitall"
    )
    
    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}
