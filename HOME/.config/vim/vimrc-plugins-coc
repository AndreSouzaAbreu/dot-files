" ------------------------------------------------------------------------------
" COC (CONQUER OF COMPLETION)                                                  |
" ------------------------------------------------------------------------------

" ENABLE / DISABLE COC
noremap <Bslash>c :CocDisable<Esc>
noremap <Bslash>C :CocEnable<Esc>

" REFACTORING
nmap <silent> <leader>gn <Plug>(coc-rename)

" DEFINITIONS
nmap <silent> <leader>gr <Plug>(coc-references)
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gt <Plug>(coc-type-definition)

" FORMAT
xmap <leader>=  <Plug>(coc-format-selected)
nmap <leader>=  <Plug>(coc-format-selected)

" DIAGNOSIS
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" EXPLORER
nmap <silent> <leader><S-d> :CocCommand explorer --root-strategies cwd<cr>
nmap <silent> <leader>d     :CocCommand explorer --root-strategies sourceBuffer<cr>

" ------------------------------------------------------------------------------
" COMPLETION

inoremap <silent><expr> <M-q>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><M-S-q> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

inoremap <silent><expr> <cr>
  \ pumvisible() ? coc#_select_confirm() :
  \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" ------------------------------------------------------------------------------
" COC DOCUMENTATION

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" ------------------------------------------------------------------------------
" FLOATING WINDOWS

nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

" ------------------------------------------------------------------------------
" HIGHLIGHT

augroup coc
  autocmd!
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup END

" ------------------------------------------------------------------------------
" CODE ACTIONS

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <Bslash>a  <Plug>(coc-codeaction-selected)
nmap <Bslash>a  <Plug>(coc-codeaction-selected)
nmap <leader>gf <Plug>(coc-fix-current)
nmap <leader>gl <Plug>(coc-codelens-action)

" Add `:Format` command to format current buffer.
command! -nargs=0 CocFormat :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? CocFold :call CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 CocOrganizeImports :call CocActionAsync('runCommand', 'editor.action.organizeImport')

" ------------------------------------------------------------------------------
" COC LIST

" Show all diagnostics.
nnoremap <silent><nowait> <Bslash>ld  :<C-u>CocList diagnostics<cr>

" Manage extensions.
nnoremap <silent><nowait> <Bslash>le  :<C-u>CocList extensions<cr>

" Show commands.
nnoremap <silent><nowait> <Bslash>lc  :<C-u>CocList commands<cr>

" Find symbol of current document.
nnoremap <silent><nowait> <Bslash>lo  :<C-u>CocList outline<cr>

" Search workspace symbols.
nnoremap <silent><nowait> <Bslash>ls  :<C-u>CocList -I symbols<cr>

" Do default action for next item.
nnoremap <silent><nowait> <Bslash>lj  :<C-u>CocNext<CR>

" Do default action for previous item.
nnoremap <silent><nowait> <Bslash>lk  :<C-u>CocPrev<CR>

" Resume latest coc list.
nnoremap <silent><nowait> <Bslash>lp  :<C-u>CocListResume<CR>
