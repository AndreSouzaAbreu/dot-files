"""""""""""""""""""""
" BASIC SETTINGS    "
"""""""""""""""""""""

" go to the 21st century
set nocompatible

" syntax highlighting
syntax on

" command history size
set history=5000

" activate mouse on all modes
set mouse=a

" use system's clipboard
set clipboard=unnamedplus

" relative line numbers
set number relativenumber

" indentation settings
set autoindent smartindent softtabstop=2 tabstop=2 shiftwidth=2 noexpandtab

" highlight search while typing
set incsearch

" highlight all strings matching the search pattern
set hlsearch

" don't redraw the screen when using macros
set lazyredraw

" show menu when searching for help, selecting themes, and so on
set wildmenu

" confirm exiting if unsaved changes
set confirm

" folding settings (space toggles block collapsing in Normal Mode)
set foldmethod=syntax foldlevel=99

" set text enconding
set encoding=utf8

" don't hide double quotes in json files
set conceallevel=0

" show at least one line below/above the cursor
set scrolloff=1

" autoload file changes
set autoread

" cursor hightlight
set cursorline

" hide statusline by default
set laststatus=0

" make path include current directory, directory of current file, and subdirectories
set path=.,,**

" ignore some directories when searching files
set wildignore+=**/node_modules/** 
set wildignore+=**/vendor/** 
set wildignore+=**/.git/** 
set wildignore+=**/.cache/** 

" list
set listchars=eol:$,tab:↳\ ,trail:~,extends:>,precedes:<,space:·

" Char Unicode
" ↲ u21b2
" ↳ u21b3
" → u2192
" • u2022
" ◦ u25e6
" ‧ u2027
" ▪ u25aa

" more at: https://www.w3schools.com/charsets/ref_utf_punctuation.asp
" press <C-v> in Insert Mode then type the unicode to insert a UTF-8 char

"""""""""""""""""""""
"  XDG CONFIG       "
"""""""""""""""""""""

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after
set viminfo+=n$XDG_CONFIG_HOME/vim/viminfo

call mkdir($XDG_DATA_HOME."/vim/spell", 'p')

set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')
set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')

"""""""""""""""""""""
"  LOAD PLUGINS     "
"""""""""""""""""""""

" turn on plugins
filetype plugin on

" download Vim Plug if not installed
if empty(glob('~/.config/vim/autoload/plug.vim'))
	echo "Downloading Vim Plug to manage plugins" 
	silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $VIMRC
endif

" define used plugins
call plug#begin('~/.config/vim/plugged')
	Plug 'agude/vim-eldar'
	Plug 'alvan/vim-closetag'
	Plug 'bignimbus/pop-punk.vim'
	Plug 'bluz71/vim-moonfly-colors'
	Plug 'chr4/nginx.vim'
	Plug 'christoomey/vim-sort-motion'
	Plug 'dunstontc/vim-vscode-theme'
	Plug 'editorconfig/editorconfig-vim'
	Plug 'ekalinin/dockerfile.vim'
	Plug 'gko/vim-coloresque'
	Plug 'jiangmiao/auto-pairs'
	Plug 'junegunn/fzf', { 'dir': '~/.local/share/fzf' }
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
	Plug 'kana/vim-textobj-function'
	Plug 'kana/vim-textobj-indent'
	Plug 'kana/vim-textobj-line'
	Plug 'kana/vim-textobj-user'
	Plug 'mattn/emmet-vim'
	Plug 'mg979/vim-visual-multi'
	Plug 'mhinz/vim-startify'
	Plug 'pangloss/vim-javascript'
	Plug 'posva/vim-vue'
	Plug 'tomasiser/vim-code-dark'
	Plug 'tpope/vim-abolish'
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-fugitive'
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	Plug 'Yggdroot/indentLine'

" Track the engine.
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'
call plug#end()

"""""""""""""""""""""
" PLUGIN SETTINGS   "
"""""""""""""""""""""

" theme
colorscheme codedark

" startify
let g:startify_custom_header = []
let g:startify_lists = [
	\ { 'type': 'bookmarks', 'header': ["\tBookmarks"]},
	\ { 'type': 'files',     'header': ["\tFiles"]},
	\ { 'type': 'dir',       'header': ["\tFiles in " . getcwd()]},
	\ { 'type': 'sessions',  'header': ["\tSessions"]},
	\ { 'type': 'commands',  'header': ["\tCommands"]},
\ ]
let g:startify_bookmarks = [
	\ { 'vimrc' : '~/.config/vim/vimrc' },
	\ { 'quterc' : '~/.config/qutebrowser/config.py' },
	\ { 'shell': '~/.config/shell' },
	\ { 'dwm': '~/.config/dwm' },
	\ { 'dwmblocks': '~/.config/dwmblocks' }, 
\ ]


" editor config
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
au FileType gitcommit let b:EditorConfig_disable = 1

" sort motion
let g:sort_motion_flags = "ui"

" airline
let g:airline_powerline_fonts = 1
let g:airline_statusline_ontop=0
let g:airline_theme='base16_twilight'
let g:airline_disable_statusline=1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#enabled = 1

let g:coc_global_extensions = ['coc-css', 'coc-emmet', 'coc-html', 'coc-phpls', 'coc-prettier', 'coc-python', 'coc-snippets', 'coc-vetur', 'coc-git']
set updatetime=600

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"


"""""""""""""""""""""
" FILE MANAGER      "
"""""""""""""""""""""

" xdg data home
let g:netrw_home = $XDG_DATA_HOME."/vim"

" turn off top banner
let g:netrw_banner=0

" set default style view
let g:netrw_liststyle=3

" n style
" 0 show default layout
" 1 show details layout
" 2 show column layout
" 3 show tree layout

" open preview of files to the right
let g:netrw_preview=1

" initial size of the file menu (percentage of the window)
let g:netrw_winsize=20

" open files to the right
let g:netrw_altv=1

"""""""""""""""""""""
" KEYBINDINGS       "
"""""""""""""""""""""

" leader key
let mapleader=","

" since 'ç' is useless in vim, map it to ':'
nmap ç :

" coc format
vnoremap <leader>f	<Plug>(coc-format-selected)
nnoremap <leader>f	<Plug>(coc-format-selected)

" clear highlight from previous searc
nnoremap <Bslash>l :noh<CR>

" close and save file easily
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>a :qall<CR>

" move lines up/down without using clipboard
nnoremap K :m .-2<CR>==
nnoremap J :m .+1<CR>==
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" buffer navigation keybindings
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprev<CR>
nnoremap <Bslash>d :bdelete<CR>

" easier window navigation
nnoremap <C-h> :wincmd h<CR>
nnoremap <C-l> :wincmd l<CR>
nnoremap <C-j> :wincmd j<CR>
nnoremap <C-k> :wincmd k<CR>
nnoremap <M-j> :resize -5<cr>
nnoremap <M-k> :resize +5<cr>
nnoremap <M-h> :vertical resize -5<cr>
nnoremap <M-l> :vertical resize +5<cr>
nmap <Bslash>H :wincmd H<CR>
nmap <Bslash>L :wincmd L<CR>
nmap <Bslash>o :wincmd o<CR>

tmap <M-w>h <C-w>:wincmd h<CR><M-w>
tmap <M-w>l <C-w>:wincmd l<CR><M-w>
tmap <M-w>j <C-w>:wincmd j<CR><M-w>
tmap <M-w>k <C-w>:wincmd k<CR><M-w>
tnoremap <M-j> <C-w>:resize -5<cr>
tnoremap <M-k> <C-w>:resize +5<cr>
tnoremap <M-h> <C-w>:vertical resize -5<cr>
tnoremap <M-l> <C-w>:vertical resize +5<cr>
" tnoremap <M-j> <C-w>:term<cr>
" tnoremap <M-k> <C-w>:vert term<cr>
" tnoremap <M-q> <C-w>:q!<cr>

" easier window split
nnoremap <leader>s :sp<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>r :wincmd r<CR>
nnoremap <Bslash>s :term ++rows=3<CR>
" nnoremap <M-k> :vert term ++cols=50<CR>

" more natural window spliting
set splitbelow
set splitright

" startify
nnoremap <leader>h :Startify<CR>

" file navigation keybindings
nnoremap <leader>f :FZF<CR>

" tab keybindings
nnoremap <leader><Tab> :tabn<CR>
nnoremap <leader>t :tab new<CR>

" toggle three
nnoremap <leader>d :Lexplore<CR>

" toggle line wrap
nnoremap <M-w> :set wrap!<CR>

" toggle display of invisible chars
nnoremap <leader>l :set list!<CR>

" toggle line numbers
nnoremap <Bslash>n :set number! relativenumber!<CR>

"toggle automatic comments
nnoremap <leader>c :set formatoptions=ql<CR>
nnoremap <leader>C :set formatoptions=qlcro<CR>

" copy, paste, and cut in visual mode
vnoremap <C-c> :!xclip -i -selection clipboard && xclip -o -selection clipboard<CR>
vnoremap <C-x> :!xclip -i -selection clipboard<CR>
vnoremap <C-v> :!xclip -o -selection clipboard<CR>

"""""""""""""""""""""
" AUTOMATED SCRIPTS "
"""""""""""""""""""""

" auto reload vim config
augroup myvimrchooks
	au!
	autocmd bufwritepost $VIMRC source $VIMRC
augroup END

" disable Coc in git commits
autocmd BufRead,BufNewFile COMMIT_EDITMSG let b:coc_enabled=0

" custom syntax for some file types
autocmd BufNewFile,BufRead .env.* set syntax=sh

" toggle statusbar
let s:hidden_all=1
function! ToggleStatusBar()
	if s:hidden_all == 0
		let s:hidden_all=1
		let g:airline_disable_statusline=1
		set laststatus=0
	else
		let s:hidden_all=0
		let g:airline_disable_statusline=0
		set laststatus=2
	endif
endfunction

nnoremap <Bslash>b :call ToggleStatusBar()<CR>

"""""""""""""""""""""
" ABBREVIATIONS     "
"""""""""""""""""""""

" fix misspelling in command mode
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q

"""""""""""""""""""""
" BUG FIXING        "
"""""""""""""""""""""

" Map the escape characters to their alt combinations
" @see https://stackoverflow.com/questions/6778961/
let c='a'
while c <= 'z'
	exec "set <A-".c.">=\e".c
	exec "imap \e".c." <A-".c.">"
	let c = nr2char(1+char2nr(c))
endwhile
set ttimeout ttimeoutlen=50

" fix mouse bug in some terminal emulators
set ttymouse=xterm2

" restore cursor shape to beam on exit
augroup restore_cursor_shape
  autocmd!
  au VimLeave * set guicursor=a:ver10-blinkoff0
augroup END
