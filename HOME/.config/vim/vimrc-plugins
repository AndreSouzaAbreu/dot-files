" ---------------------------------------------------------------------------
" PLUGINS
" ---------------------------------------------------------------------------

" turn on plugins
filetype plugin on

" download Vim Plug if not installed
if empty(glob('~/.config/vim/autoload/plug.vim'))
  echo "downloading Vim Plug to manage plugins" 
  silent !curl -fLo ~/.config/vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $VIMRC
endif

" LIST OF PLUGINS -----------------------------------------------------------

call plug#begin('~/.config/vim/plugged')

  " themes
  Plug 'ayu-theme/ayu-vim'         " theme ayu
  Plug 'tomasiser/vim-code-dark'   " theme codedark
  Plug 'agude/vim-eldar'           " theme eldar
  Plug 'morhetz/gruvbox'           " theme gruvbox
  Plug 'tomasr/molokai'            " theme molokai
  Plug 'bluz71/vim-moonfly-colors' " theme moonfly
  Plug 'joshdick/onedark.vim'      " theme onedark
  Plug 'bignimbus/pop-punk.vim'    " theme pop-punk

  " Syntax Highlight
  Plug 'ekalinin/dockerfile.vim'      " dockerfile
  Plug 'uiiaoo/java-syntax.vim'       " java
  Plug 'pangloss/vim-javascript'      " javascript
  Plug 'chr4/nginx.vim'               " nginx
  Plug 'jvirtanen/vim-octave'         " octave
  Plug 'vim-pandoc/vim-pandoc-syntax' " pandoc
  Plug 'cespare/vim-toml'             " toml
  Plug 'posva/vim-vue'                " vue
  
  " junegunn plugins
  Plug 'junegunn/vim-easy-align' " align text
  Plug 'junegunn/fzf.vim'        " fuzzy finder

  " Tim Pope's plugins
  Plug 'tpope/vim-abolish'    " substitution
  Plug 'tpope/vim-commentary' " toggle comments
  Plug 'tpope/vim-surround'   " surrouding motion

  " text objects
  Plug 'kana/vim-textobj-user'               " engine
  Plug 'kana/vim-textobj-function'           " function
  Plug 'kana/vim-textobj-indent'             " indentation
  Plug 'jceb/vim-textobj-uri'                " uri
  Plug 'Julian/vim-textobj-variable-segment' " variable segment

  " Other plugins
  Plug 'AndrewRadev/tagalong.vim'                 " automatically change html tags
  Plug 'arthurxavierx/vim-caser'                  " change case
  Plug 'arthurxavierx/vim-unicoder'               " automatic insert unicode chars
  Plug 'chrisbra/Colorizer'                       " color colornames and colorcodes
  Plug 'chrisbra/csv.vim'                         " work with csv files
  Plug 'chrisbra/improvedft'                      " improved f and t commands
  Plug 'christoomey/vim-sort-motion'              " sort motion
  Plug 'editorconfig/editorconfig-vim'            " enforce editorconfig settings
  Plug 'kassio/neoterm'                           " terminal REPL
  Plug 'lervag/vimtex'                            " LaTeX
  Plug 'liuchengxu/vim-which-key'                 " whichkey (like emacs)
  Plug 'ludovicchabant/vim-gutentags'             " tag manager
  Plug 'mattn/emmet-vim'                          " emmet engine
  Plug 'mg979/vim-visual-multi'                   " multi cursor
  Plug 'mhinz/vim-startify'                       " home
  Plug 'nanotee/zoxide.vim'                       " zoxide
  Plug 'neoclide/coc.nvim', {'branch': 'release'} " coc
  Plug 'preservim/tagbar'                         " tag panel
  Plug 'preservim/vim-pencil'                     " free writing
  Plug 'SirVer/ultisnips'                         " snippets engine
  Plug 'tommcdo/vim-ninja-feet'                   " operations to start/end of motion
  Plug 'vim-airline/vim-airline'                  " statusbar
  Plug 'vim-airline/vim-airline-themes'           " statusbar themes

call plug#end()

" ---------------------------------------------------------------------------
" PLUGIN SETTINGS
" ---------------------------------------------------------------------------

" AIRLINE -------------------------------------------------------------------

let g:airline_powerline_fonts = 1
let g:airline_statusline_ontop=0
let g:airline_theme='base16_twilight'
let g:airline_disable_statusline=1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#enabled = 1

" COC -----------------------------------------------------------------------

let g:coc_global_extensions = [
  \ 'coc-clangd',
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-emmet',
  \ 'coc-explorer',
  \ 'coc-eslint',
  \ 'coc-git',
  \ 'coc-html',
  \ 'coc-java',
  \ 'coc-json',
  \ 'coc-phpls',
  \ 'coc-prettier',
  \ 'coc-python',
  \ 'coc-sh',
  \ 'coc-snippets',
  \ 'coc-tsserver',
  \ 'coc-vetur',
\ ]
set updatetime=300

" COLORIZER -----------------------------------------------------------------

let g:colorizer_auto_filetype='css,scss,yaml,toml'
let g:colorizer_skip_comments=1
let g:colorizer_colornames=0

" EDITOR CONFIG -------------------------------------------------------------

let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" EMMET ---------------------------------------------------------------------

let g:user_emmet_expandabbr_key = '<M-e>'
let g:user_emmet_install_global = 0

" NEOTERM -------------------------------------------------------------------

let g:neoterm_size = 40
let g:neoterm_default_mod = 'botright vertical'
let g:neoterm_autoscroll = 1
let g:neoterm_term_per_tab = 1
let g:neoterm_repl_python = ['python']
let g:neoterm_repl_r = ['R', '-q']
let g:neoterm_repl_octave_qt = 1

" STARTIFY ------------------------------------------------------------------

let g:startify_custom_header = []
let g:startify_lists = [
  \ { 'type': 'bookmarks', 'header': ["\tBookmarks"]},
  \ { 'type': 'files',     'header': ["\tFiles"]},
  \ { 'type': 'dir',       'header': ["\tFiles in " . getcwd()]},
  \ { 'type': 'sessions',  'header': ["\tSessions"]},
  \ { 'type': 'commands',  'header': ["\tCommands"]},
\ ]
let g:startify_bookmarks = [
  \ { 'vv': '~/.config/vim/vimrc' },
  \ { 'uu': '~/.config/vim/ultisnips/' },
  \ { 'nn': '~/.config/nvim/init.vim' },
  \ { 'qq': '~/.config/qutebrowser/config.py' },
\ ]

" SNIPPETS ------------------------------------------------------------------

let g:UltiSnipsSnippetDirectories = [ $XDG_CONFIG_HOME . '/vim/ultisnips']
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"

" SORT MOTION ---------------------------------------------------------------

let g:sort_motion_flags = "ui"

" VIM CSS COLORS ------------------------------------------------------------

let g:cssColorVimDoNotMessMyUpdatetime = 1

" VIM CASER -----------------------------------------------------------------

let g:caser_prefix = "\\k"

" VIM SURROUDING ------------------------------------------------------------

let g:surround_no_mappings=1 " make fucking plugin don't mess up keybindings
nmap d,s  <Plug>Dsurround
nmap c,s  <Plug>Csurround
nmap c,S  <Plug>CSurround
nmap y,s  <Plug>Ysurround
nmap y,S  <Plug>YSurround
nmap y,ss <Plug>Yssurround
nmap y,Ss <Plug>YSsurround
nmap y,SS <Plug>YSsurround
xmap ,S   <Plug>VSurround
xmap g,S  <Plug>VgSurround

" VIM TEX -------------------------------------------------------------------

let g:tex_flavor='latex'
let g:tex_conceal='abdmgs'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
let g:vimtex_mappins_enabled=0

" VIM UNICODER --------------------------------------------------------------

let g:unicoder_exclude_filetypes = ['tex', 'latex', 'markdown', 'markdown.pandoc']

" TEXT OBJECTS --------------------------------------------------------------

call textobj#user#plugin('braces', {
\   'angle': {
\     'pattern': ['<<', '>>'],
\     'select-a': 'aA',
\     'select-i': 'iA',
\   },
\ })

call textobj#user#plugin('line', {
\  '-': {
\    'select-a-function': 'CurrentLineA',
\    'select-a': 'aL',
\    'select-i-function': 'CurrentLineI',
\    'select-i': 'iL',
\  },
\ })

function! CurrentLineA()
  normal! 0
  let head_pos = getpos('.')
  normal! $
  let tail_pos = getpos('.')
  return ['v', head_pos, tail_pos]
endfunction

function! CurrentLineI()
  normal! ^
  let head_pos = getpos('.')
  normal! g_
  let tail_pos = getpos('.')
  let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
  return
  \ non_blank_char_exists_p
  \ ? ['v', head_pos, tail_pos]
  \ : 0
endfunction

" THEMES --------------------------------------------------------------------

" favorite themes: ayu, eldar, pop-punk, moonfly, codedark, molokai, onedark
colorscheme eldar

" for some weird reason ayu only works after adding line below
" :colorscheme ayu
