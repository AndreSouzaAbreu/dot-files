" ---------------------------------------------------------------------------
" KEYBINDINGS
" ---------------------------------------------------------------------------

" the leader key
let mapleader=" "

" ---------------------------------------------------------------------------
" BUFFERS
" ---------------------------------------------------------------------------

" buffer navigation keybindings
nnoremap <Bslash>bn :bn<CR>
nnoremap <Bslash>bp :bp<CR>
nnoremap <Bslash>bd :bd<CR>
nnoremap <Bslash>bD :bd!<CR>
nnoremap <M-1> :bp<CR>
nnoremap <M-2> :bn<CR>

" close and save file easily
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>Q :q!<CR>
nnoremap <leader>a :qall<CR>
nnoremap <leader>A :qall!<CR>

" ---------------------------------------------------------------------------
" WINDOW
" ---------------------------------------------------------------------------

" window split
nnoremap <leader>v <C-w>v
nnoremap <leader>s <C-w>s

" window resize
nnoremap <silent> <M-S-j> <C-W>-
nnoremap <silent> <M-S-k> <C-W>+
nnoremap <silent> <M-S-h> <C-W><
nnoremap <silent> <M-S-l> <C-W>>

" window navigation
nnoremap <M-h> <C-W>h
nnoremap <M-j> <C-W>j
nnoremap <M-k> <C-W>k
nnoremap <M-l> <C-W>l

" ---------------------------------------------------------------------------
" TERMINAL
" ---------------------------------------------------------------------------

" resize terminal
tnoremap <silent> <C-[> <C-w>+<CR>
tnoremap <silent> <C-]> <C-w>-<CR>

" turn the terminal into a normal buffer
tnoremap <silent> <Esc> <C-w><S-n>:set nonumber norelativenumber<CR>

" toggle terminal
nnoremap <silent> <A-s> :call TgtToggleH()<CR>
tnoremap <silent> <A-s> <C-w><S-n>:call TerminalToggle()<CR>

" ---------------------------------------------------------------------------
" CLIPBOARD
" ---------------------------------------------------------------------------

" paste from clipboard in insert mode
inoremap <C-S-v> <esc>"+pi

" copy, paste, and cut t clipboard in visual mode
vnoremap <Bslash>c "+y<CR>
vnoremap <Bslash>x "+d<CR>
vnoremap <Bslash>v "+p<CR>

" ---------------------------------------------------------------------------
" MISCELLANEOUS
" ---------------------------------------------------------------------------

" map ç to :
nnoremap ç :
vnoremap ç :

" source vimrc
nnoremap <leader>S :source $vimrc<CR>

" clear highlight from previous search
nnoremap <silent> <Bslash>l :noh<CR>
nnoremap <silent> <Bslash>ç :noh<CR>

" search and replace word under cursor
nnoremap <Bslash>w :%s/<C-r><C-w>/

" move lines up/down without using clipboard
nnoremap <M-o> :m .-2<CR>==
nnoremap <M-i> :m .+1<CR>==
vnoremap <M-i> :m '>+1<CR>gv=gv
vnoremap <M-o> :m '<-2<CR>gv=gv

" navigate between methods of a class
nnoremap <Bslash>, ]m
nnoremap <Bslash>. [m

" toggle line wrap
nnoremap <M-w> :set wrap!<CR>

" toggle display of invisible chars
nnoremap <silent> <leader>l :set list!<CR>

" toggle line numbers
nnoremap <silent> <Bslash>n :set number! relativenumber!<CR>

" toggle automatic comments on new lines
nnoremap <leader>c :set formatoptions=ql<CR>
nnoremap <leader>C :set formatoptions=qlcro<CR>

" spell 
nnoremap <C-s> [s1z=<CR><C-o>
nnoremap <C-S-s> ]s1z=<CR><C-o>
inoremap <C-s> <C-g>u<Esc>[s1z=`]a<C-g>u
inoremap <C-S-s> <C-g>u<Esc>]s1z=`]a<C-g>u

" jump to mark then jump to the file
" whose name is under the cursor
let c='a'
while c <= 'z'
	exec "nnoremap <Bslash>ç".c." `".c."gf"
	let c = nr2char(1+char2nr(c))
endwhile
let c='A'
while c <= 'A'
	exec "nnoremap <Bslash>ç".c." `".c."gf"
	let c = nr2char(1+char2nr(c))
endwhile

" ---------------------------------------------------------------------------
" TABS
" ---------------------------------------------------------------------------

" close/open tabs
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>T :tabc<CR>

" ---------------------------------------------------------------------------
" PLUGINS 
" ---------------------------------------------------------------------------

" COC (CONQUER OF COMPLETION) -----------------------------------------------

" enable/disable coc
noremap <Bslash>c :CocDisable<Esc>
noremap <Bslash>C :CocEnable<Esc>

" go to definitions
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gt <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" toggle explorer
nmap <silent> <leader>d :CocCommand explorer --root-strategies sourceBuffer<cr>
nmap <silent> <leader><S-d> :CocCommand explorer --root-strategies cwd<cr>

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <M-TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
inoremap <expr><M-S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Show documentation for symbol under cursor
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" EASY ALIGN ----------------------------------------------------------------

" interactive EasyAlign in visual mode
xmap gA <Plug>(EasyAlign)

" interactive EasyAlign for a motion text object
nmap gA <Plug>(EasyAlign)

" FZF -----------------------------------------------------------------------
" open new file
nnoremap <leader>f :FZF<CR>

" NETRW ---------------------------------------------------------------------
" toggle file explorer
" nnoremap <leader>d :Lexplore<CR>

" NEOTERM -------------------------------------------------------------------
xmap gx <Plug>(neoterm-repl-send)
nmap gx <Plug>(neoterm-repl-send)
nmap gxX :TREPLSendFile<CR>
nmap gxx :TREPLSendLine<CR>

" STARTFIY ------------------------------------------------------------------
nnoremap <Bslash>h :Startify<CR>

" TAGBAR --------------------------------------------------------------------
nnoremap <Bslash>t :TagbarToggle<CR>

" SURROUNDINGS --------------------------------------------------------------

nmap d,s  <Plug>Dsurround
nmap c,s  <Plug>Csurround
nmap c,S  <Plug>CSurround
nmap y,s  <Plug>Ysurround
nmap y,S  <Plug>YSurround
nmap y,ss <Plug>Yssurround
nmap y,Ss <Plug>YSsurround
nmap y,SS <Plug>YSsurround
xmap g,S  <Plug>VSurround
xmap g,s  <Plug>VgSurround
