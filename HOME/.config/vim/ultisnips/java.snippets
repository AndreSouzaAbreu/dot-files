global !p
def comment(): 
    return vim.eval('IsCursorWithinComment') == '1'

def code():
    return vim.eval('IsCursorWithinComment()') == '0'
endglobal


## MAIN
context "code()"
snippet main "Main function" b
public void main(String args[]) {
	$0
}
endsnippet

## PRIVATE FUNCTIONS
snippet pv "Description" b
private ${1:void} ${2:functionName}($3) {
	$4
}
$0
endsnippet

snippet spv "Description" b
private static ${1:void} ${2:functionName}($3) {
	$4
}
$0
endsnippet

## PUBLIC FUNCTIONS
snippet pb "Description" b
public ${1:void} ${2:functionName}($3) {
	$4
}
$0
endsnippet

snippet spb "Description" b
public static ${1:void} ${2:functionName}($3) {
	$4
}
$0
endsnippet

## CLASSES
snippet class "class" bA
class ${1:`!p snip.rv = snip.basename`} {
	$0
}
endsnippet

snippet pvclass "private class" bA
private class ${1:`!p snip.rv = snip.basename`} {
	$0
}
endsnippet

snippet pbclass "public class" bA
public class ${1:`!p snip.rv = snip.basename`} {
	$0
}
endsnippet

## PRINT
context "code()"
snippet println "Description" w
StdOut.println($1);$0
endsnippet

context "code()"
snippet print "Description" w
StdOut.print($1);$0
endsnippet

context "code()"
snippet printf "Description" w
StdOut.printf($1);$0
endsnippet

## IF STATEMENTS
context "code()"
snippet "if " "if statement" wrA
if ($1) $0
endsnippet

context "code()"
snippet "if" "if statement" w
if ($1) {
	$2
}
$0
endsnippet

context "code()"
snippet sif "short if statement" wA
if ($1)
	$2
$0
endsnippet

context "code()"
snippet "iif " "inline if statement" wrA
if ($1) $2
$0
endsnippet

## ELSE STATEMENTS
context "code()"
snippet "else" "else statement" w
else {
	$1
}
$0
endsnippet

context "code()"
snippet selse "short else statement" wA
else
	$1
$0
endsnippet

context "code()"
snippet ielse "inline else statement" wA
else $1
$0
endsnippet

## IF-ELSE STATEMENTS
context "code()"
snippet ifelse "if-else statement" wA
if ($1) {
	$2
} else {
	$3
}
$0
endsnippet

context "code()"
snippet sifelse "short if-else statement" wA
if ($1)
	$2
else
	$3
$0
endsnippet

context "code()"
snippet iifelse "sinline if-else statement" wA
if ($1) $2
else $3
$0
endsnippet

## ELSE-IF STATEMENTS
context "code()"
snippet elif "if-else statement" wA
else if ($1) {
	$2
}
$0
endsnippet

context "code()"
snippet selif "short if-else statement" wA
else if ($1)
	$2
$0
endsnippet

context "code()"
snippet ielif "inline if-else statement" wA
else if ($1) $2
$0
endsnippet

## IF-ELSE-IF STATEMENTS
context "code()"
snippet ifefi "if-else-if statement" wA
if ($1) {
	$2
} else if ($3) {
	$4
}
$0
endsnippet

context "code()"
snippet sifefi "short if-else-if statement" wA
if ($1)
	$2
else if ($3)
	$4
$0
endsnippet

context "code()"
snippet iifefi "if-else-if statement" wA
if ($1) $2
else if ($3) $4
$0
endsnippet

## IF-ELSE-IF-ELSE statemente
context "code()"
snippet ifefe "if-else-if-else statement" wA
if ($1) {
	$2
} else if ($3) {
	$4
} else {
	$5
}
$0
endsnippet

context "code()"
snippet sifefe "short if-else-if-else statement" wA
if ($1)
	$2
else if ($3)
	$4
else
	$5
$0
endsnippet

context "code()"
snippet iifefe "short if-else-if-else statement" wA
if ($1) $2
else if ($3) $4
else $5
$0
endsnippet

## FOR STATEMENTS

## FOR VAR=0 STATEMENTS
context "code()"
snippet "for([ijkn])" "for loop" rwA
for (int `!p snip.rv = match.group(1)` = 0; `!p snip.rv = match.group(1)` < ${1:length}; `!p snip.rv = match.group(1)`++) {
	$2
}
$0
endsnippet

context "code()"
snippet "sfor([ijkn])" "short for loop" rwA
for (int `!p snip.rv = match.group(1)` = 0; `!p snip.rv = match.group(1)` < ${1:length}; `!p snip.rv = match.group(1)`++)
	$2
$0
endsnippet

context "code()"
snippet "ifor([ijkn])" "inline for loop" rwA
for (int `!p snip.rv = match.group(1)` = 0; `!p snip.rv = match.group(1)` < ${1:length}; `!p snip.rv = match.group(1)`++) $2
$0
endsnippet

## WHILE STATEMENTS
context "code()"
snippet while "while loop" wA
while (${1:true}) {
	$2
}
$0
endsnippet

context "code()"
snippet swhile "short while loop" wA
while (${1:true})
	$2
$0
endsnippet

context "code()"
snippet iwhile "inline while loop" wA
while (${1:true}) $2
$0
endsnippet
